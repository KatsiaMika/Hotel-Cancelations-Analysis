{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('/Users/katsia/Desktop/hotel_bookings.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analysis of Hotel Booking Cancelations in City and Resort Hotels in Portugal (2015-2017)\n",
    "by *Katsia Mikalayeva* \n",
    "### Data Source: \n",
    "[Hotel Booking Demand on Kaggle](https://www.kaggle.com/jessemostipak/hotel-booking-demand)\n",
    "### Business Goal: \n",
    "### ***How can the company prevent revenue losses by reducing cancelation rate by 20% ($2.18M) in City Hotel in the top 4 countries by the number of cancelations over the next 12 months?***\n",
    "​\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Original dataset consists of 119390 rows and 32 columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hotel</th>\n",
       "      <th>is_canceled</th>\n",
       "      <th>lead_time</th>\n",
       "      <th>arrival_date_year</th>\n",
       "      <th>arrival_date_month</th>\n",
       "      <th>arrival_date_week_number</th>\n",
       "      <th>arrival_date_day_of_month</th>\n",
       "      <th>stays_in_weekend_nights</th>\n",
       "      <th>stays_in_week_nights</th>\n",
       "      <th>adults</th>\n",
       "      <th>...</th>\n",
       "      <th>deposit_type</th>\n",
       "      <th>agent</th>\n",
       "      <th>company</th>\n",
       "      <th>days_in_waiting_list</th>\n",
       "      <th>customer_type</th>\n",
       "      <th>adr</th>\n",
       "      <th>required_car_parking_spaces</th>\n",
       "      <th>total_of_special_requests</th>\n",
       "      <th>reservation_status</th>\n",
       "      <th>reservation_status_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>0</td>\n",
       "      <td>342</td>\n",
       "      <td>2015</td>\n",
       "      <td>July</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>2015-07-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>0</td>\n",
       "      <td>737</td>\n",
       "      <td>2015</td>\n",
       "      <td>July</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>2015-07-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2015</td>\n",
       "      <td>July</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>2015-07-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>2015</td>\n",
       "      <td>July</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>304.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>2015-07-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>2015</td>\n",
       "      <td>July</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>240.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>98.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>2015-07-03</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          hotel  is_canceled  lead_time  arrival_date_year arrival_date_month  \\\n",
       "0  Resort Hotel            0        342               2015               July   \n",
       "1  Resort Hotel            0        737               2015               July   \n",
       "2  Resort Hotel            0          7               2015               July   \n",
       "3  Resort Hotel            0         13               2015               July   \n",
       "4  Resort Hotel            0         14               2015               July   \n",
       "\n",
       "   arrival_date_week_number  arrival_date_day_of_month  \\\n",
       "0                        27                          1   \n",
       "1                        27                          1   \n",
       "2                        27                          1   \n",
       "3                        27                          1   \n",
       "4                        27                          1   \n",
       "\n",
       "   stays_in_weekend_nights  stays_in_week_nights  adults  ...  deposit_type  \\\n",
       "0                        0                     0       2  ...    No Deposit   \n",
       "1                        0                     0       2  ...    No Deposit   \n",
       "2                        0                     1       1  ...    No Deposit   \n",
       "3                        0                     1       1  ...    No Deposit   \n",
       "4                        0                     2       2  ...    No Deposit   \n",
       "\n",
       "   agent company days_in_waiting_list customer_type   adr  \\\n",
       "0    NaN     NaN                    0     Transient   0.0   \n",
       "1    NaN     NaN                    0     Transient   0.0   \n",
       "2    NaN     NaN                    0     Transient  75.0   \n",
       "3  304.0     NaN                    0     Transient  75.0   \n",
       "4  240.0     NaN                    0     Transient  98.0   \n",
       "\n",
       "   required_car_parking_spaces  total_of_special_requests  reservation_status  \\\n",
       "0                            0                          0           Check-Out   \n",
       "1                            0                          0           Check-Out   \n",
       "2                            0                          0           Check-Out   \n",
       "3                            0                          0           Check-Out   \n",
       "4                            0                          1           Check-Out   \n",
       "\n",
       "  reservation_status_date  \n",
       "0              2015-07-01  \n",
       "1              2015-07-01  \n",
       "2              2015-07-02  \n",
       "3              2015-07-02  \n",
       "4              2015-07-03  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script> \n",
       "code_show=true;  \n",
       "function code_toggle() { \n",
       "if (code_show){ \n",
       "$('div.input').hide(); \n",
       "} else { \n",
       "$('div.input').show(); \n",
       "} \n",
       "code_show = !code_show \n",
       "}  \n",
       "$( document ).ready(code_toggle); \n",
       "</script> \n",
       "<form action=\"javascript:code_toggle()\"><input type=\"submit\" value=\"Click here to toggle on/off the raw code.\"></form>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import HTML \n",
    "  \n",
    "HTML('''<script> \n",
    "code_show=true;  \n",
    "function code_toggle() { \n",
    "if (code_show){ \n",
    "$('div.input').hide(); \n",
    "} else { \n",
    "$('div.input').show(); \n",
    "} \n",
    "code_show = !code_show \n",
    "}  \n",
    "$( document ).ready(code_toggle); \n",
    "</script> \n",
    "<form action=\"javascript:code_toggle()\"><input type=\"submit\" value=\"Click here to toggle on/off the raw code.\"></form>''')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### After exploring the percentage of missing values in the dataset's columns, 'Company' and 'Agent' columns are dropped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "hotel                             0.000000\n",
       "is_canceled                       0.000000\n",
       "lead_time                         0.000000\n",
       "arrival_date_year                 0.000000\n",
       "arrival_date_month                0.000000\n",
       "arrival_date_week_number          0.000000\n",
       "arrival_date_day_of_month         0.000000\n",
       "stays_in_weekend_nights           0.000000\n",
       "stays_in_week_nights              0.000000\n",
       "adults                            0.000000\n",
       "children                          0.000034\n",
       "babies                            0.000000\n",
       "meal                              0.000000\n",
       "country                           0.004087\n",
       "market_segment                    0.000000\n",
       "distribution_channel              0.000000\n",
       "is_repeated_guest                 0.000000\n",
       "previous_cancellations            0.000000\n",
       "previous_bookings_not_canceled    0.000000\n",
       "reserved_room_type                0.000000\n",
       "assigned_room_type                0.000000\n",
       "booking_changes                   0.000000\n",
       "deposit_type                      0.000000\n",
       "agent                             0.136862\n",
       "company                           0.943069\n",
       "days_in_waiting_list              0.000000\n",
       "customer_type                     0.000000\n",
       "adr                               0.000000\n",
       "required_car_parking_spaces       0.000000\n",
       "total_of_special_requests         0.000000\n",
       "reservation_status                0.000000\n",
       "reservation_status_date           0.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Exploring missing values\n",
    "missing_values = df.isnull().sum()\n",
    "missing_values / len(df) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(['company', 'agent'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### City Hotel has twice as much bookings as Resort Hotel, with 66.4% of all bookings "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Finding out the distribution of bookings between the City hotel and the Resort Hotel\n",
    "\n",
    "plt.rcParams['figure.figsize'] = 5,5\n",
    "labels = df['hotel'].value_counts().index.tolist()\n",
    "counts = df['hotel'].value_counts().tolist()\n",
    "explode = (0, 0.1)\n",
    "colors = ['pink', 'violet']\n",
    "plt.pie(counts, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',textprops={'fontsize': 10}, shadow=True)\n",
    "plt.title('Distribution of Bookings between City and Resort Hotels', weight='bold')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### City Hotel gets 1,5 times more cancelations as Resort Hotel (41.7% vs 27.8%) and will therefore be the focus of this analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "city = df.loc[(df['hotel'])=='City Hotel']\n",
    "resort = df.loc[(df['hotel'])=='Resort Hotel']\n",
    "\n",
    "plt.rcParams['figure.figsize'] = 15,15\n",
    "plt.subplot(1,2,1)\n",
    "labels = city['is_canceled'].value_counts().index.tolist()\n",
    "counts = city['is_canceled'].value_counts().tolist()\n",
    "explode = (0, 0.1)\n",
    "colors = ['violet', 'blue']\n",
    "plt.pie(counts, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',textprops={'fontsize': 10}, shadow=True)\n",
    "plt.title('Canceled vs Non-canceled bookings in City hotel', weight='bold')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "labels = resort['is_canceled'].value_counts().index.tolist()\n",
    "counts = resort['is_canceled'].value_counts().tolist()\n",
    "explode = (0, 0.1)\n",
    "colors = ['violet', 'blue']\n",
    "plt.pie(counts, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',textprops={'fontsize': 10}, shadow=True)\n",
    "plt.title('Canceled vs Non-canceled bookings in Resort hotel', weight='bold')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Average nightly prices for the two hotels:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Price for City Hotel\n",
      "$105.30\n"
     ]
    }
   ],
   "source": [
    "print(\"Average Price for City Hotel\")\n",
    "city_price = city['adr'].mean()\n",
    "x = \"${:.2f}\".format(city_price)\n",
    "print(x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Price for Resort Hotel\n",
      "$94.95\n"
     ]
    }
   ],
   "source": [
    "print(\"Average Price for Resort Hotel\")\n",
    "resort_price = resort['adr'].mean()\n",
    "x = \"${:.2f}\".format(resort_price)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Overall revenue lost from cancelations for both hotels:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum of Revenue Lost from Cancelations in City Hotel\n",
      "$10885059.78\n"
     ]
    }
   ],
   "source": [
    "print(\"Sum of Revenue Lost from Cancelations in City Hotel\")\n",
    "canceled_city = city.loc[(city['is_canceled'])==1]\n",
    "\n",
    "#revenue for canceled_city:\n",
    "canceled_city['revenue'] = (canceled_city['stays_in_weekend_nights'] + canceled_city['stays_in_week_nights']) * canceled_city['adr']\n",
    "\n",
    "canceled_city_sum = canceled_city['revenue'].sum()\n",
    "x = \"${:.2f}\".format(canceled_city_sum)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum of Revenue Lost from Cancelations in Resort Hotel\n",
      "$5842177.34\n"
     ]
    }
   ],
   "source": [
    "print(\"Sum of Revenue Lost from Cancelations in Resort Hotel\")\n",
    "canceled_resort = resort.loc[(resort['is_canceled'])==1]\n",
    "\n",
    "#revenue for canceled_resort:\n",
    "canceled_resort['revenue'] = (canceled_resort['stays_in_weekend_nights'] + canceled_resort['stays_in_week_nights']) * canceled_resort['adr']\n",
    "\n",
    "canceled_resort_sum = canceled_resort['revenue'].sum()\n",
    "x = \"${:.2f}\".format(canceled_resort_sum)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Mapping the bookings by Country of Origin\n",
    "import plotly.graph_objects as go\n",
    "import plotly.figure_factory as ff\n",
    "from plotly.colors import n_colors\n",
    "from plotly.subplots import make_subplots\n",
    "from sklearn.preprocessing import MinMaxScaler"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### After exploring the country of origin of guests, the following countries are the top 6 bookers for both number of bookings and number of cancelations:\n",
    "\n",
    "- **Portugal (PRT)**:          48590 bookings, 27519 cancelations;\n",
    "- **Great Britain (GBR)**:     12129 bookings, 2453 cancelations;\n",
    "- **France (FRA)**:            10415 bookings, 1934 cancelations;    \n",
    "- **Spain (ESP)**:             8568 bookings, 2177 cancelations;\n",
    "- **Italy (ITA)**:             3766 bookings, 1333 cancelations;\n",
    "- **Germany (DEU)**:           7287 bookings, 1218 cancelations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "coloraxis": "coloraxis",
         "geo": "geo",
         "hovertemplate": "<b>%{hovertext}</b><br><br>country=%{location}<br>count=%{z}<extra></extra>",
         "hovertext": [
          "ABW",
          "AGO",
          "AIA",
          "ALB",
          "AND",
          "ARE",
          "ARG",
          "ARM",
          "ASM",
          "ATA",
          "ATF",
          "AUS",
          "AUT",
          "AZE",
          "BDI",
          "BEL",
          "BEN",
          "BFA",
          "BGD",
          "BGR",
          "BHR",
          "BHS",
          "BIH",
          "BLR",
          "BOL",
          "BRA",
          "BRB",
          "BWA",
          "CAF",
          "CHE",
          "CHL",
          "CHN",
          "CIV",
          "CMR",
          "CN",
          "COL",
          "COM",
          "CPV",
          "CRI",
          "CUB",
          "CYM",
          "CYP",
          "CZE",
          "DEU",
          "DJI",
          "DMA",
          "DNK",
          "DOM",
          "DZA",
          "ECU",
          "EGY",
          "ESP",
          "EST",
          "ETH",
          "FIN",
          "FJI",
          "FRA",
          "FRO",
          "GAB",
          "GBR",
          "GEO",
          "GGY",
          "GHA",
          "GIB",
          "GLP",
          "GNB",
          "GRC",
          "GTM",
          "GUY",
          "HKG",
          "HND",
          "HRV",
          "HUN",
          "IDN",
          "IMN",
          "IND",
          "IRL",
          "IRN",
          "IRQ",
          "ISL",
          "ISR",
          "ITA",
          "JAM",
          "JEY",
          "JOR",
          "JPN",
          "KAZ",
          "KEN",
          "KHM",
          "KIR",
          "KNA",
          "KOR",
          "KWT",
          "LAO",
          "LBN",
          "LBY",
          "LCA",
          "LIE",
          "LKA",
          "LTU",
          "LUX",
          "LVA",
          "MAC",
          "MAR",
          "MCO",
          "MDG",
          "MDV",
          "MEX",
          "MKD",
          "MLI",
          "MLT",
          "MMR",
          "MNE",
          "MOZ",
          "MRT",
          "MUS",
          "MWI",
          "MYS",
          "MYT",
          "NAM",
          "NCL",
          "NGA",
          "NIC",
          "NLD",
          "NOR",
          "NPL",
          "NZL",
          "OMN",
          "PAK",
          "PAN",
          "PER",
          "PHL",
          "PLW",
          "POL",
          "PRI",
          "PRT",
          "PRY",
          "PYF",
          "QAT",
          "ROU",
          "RUS",
          "RWA",
          "SAU",
          "SDN",
          "SEN",
          "SGP",
          "SLE",
          "SLV",
          "SMR",
          "SRB",
          "STP",
          "SUR",
          "SVK",
          "SVN",
          "SWE",
          "SYC",
          "SYR",
          "TGO",
          "THA",
          "TJK",
          "TMP",
          "TUN",
          "TUR",
          "TWN",
          "TZA",
          "UGA",
          "UKR",
          "UMI",
          "URY",
          "USA",
          "UZB",
          "VEN",
          "VGB",
          "VNM",
          "ZAF",
          "ZMB",
          "ZWE"
         ],
         "locations": [
          "ABW",
          "AGO",
          "AIA",
          "ALB",
          "AND",
          "ARE",
          "ARG",
          "ARM",
          "ASM",
          "ATA",
          "ATF",
          "AUS",
          "AUT",
          "AZE",
          "BDI",
          "BEL",
          "BEN",
          "BFA",
          "BGD",
          "BGR",
          "BHR",
          "BHS",
          "BIH",
          "BLR",
          "BOL",
          "BRA",
          "BRB",
          "BWA",
          "CAF",
          "CHE",
          "CHL",
          "CHN",
          "CIV",
          "CMR",
          "CN",
          "COL",
          "COM",
          "CPV",
          "CRI",
          "CUB",
          "CYM",
          "CYP",
          "CZE",
          "DEU",
          "DJI",
          "DMA",
          "DNK",
          "DOM",
          "DZA",
          "ECU",
          "EGY",
          "ESP",
          "EST",
          "ETH",
          "FIN",
          "FJI",
          "FRA",
          "FRO",
          "GAB",
          "GBR",
          "GEO",
          "GGY",
          "GHA",
          "GIB",
          "GLP",
          "GNB",
          "GRC",
          "GTM",
          "GUY",
          "HKG",
          "HND",
          "HRV",
          "HUN",
          "IDN",
          "IMN",
          "IND",
          "IRL",
          "IRN",
          "IRQ",
          "ISL",
          "ISR",
          "ITA",
          "JAM",
          "JEY",
          "JOR",
          "JPN",
          "KAZ",
          "KEN",
          "KHM",
          "KIR",
          "KNA",
          "KOR",
          "KWT",
          "LAO",
          "LBN",
          "LBY",
          "LCA",
          "LIE",
          "LKA",
          "LTU",
          "LUX",
          "LVA",
          "MAC",
          "MAR",
          "MCO",
          "MDG",
          "MDV",
          "MEX",
          "MKD",
          "MLI",
          "MLT",
          "MMR",
          "MNE",
          "MOZ",
          "MRT",
          "MUS",
          "MWI",
          "MYS",
          "MYT",
          "NAM",
          "NCL",
          "NGA",
          "NIC",
          "NLD",
          "NOR",
          "NPL",
          "NZL",
          "OMN",
          "PAK",
          "PAN",
          "PER",
          "PHL",
          "PLW",
          "POL",
          "PRI",
          "PRT",
          "PRY",
          "PYF",
          "QAT",
          "ROU",
          "RUS",
          "RWA",
          "SAU",
          "SDN",
          "SEN",
          "SGP",
          "SLE",
          "SLV",
          "SMR",
          "SRB",
          "STP",
          "SUR",
          "SVK",
          "SVN",
          "SWE",
          "SYC",
          "SYR",
          "TGO",
          "THA",
          "TJK",
          "TMP",
          "TUN",
          "TUR",
          "TWN",
          "TZA",
          "UGA",
          "UKR",
          "UMI",
          "URY",
          "USA",
          "UZB",
          "VEN",
          "VGB",
          "VNM",
          "ZAF",
          "ZMB",
          "ZWE"
         ],
         "name": "",
         "type": "choropleth",
         "z": [
          2,
          362,
          1,
          12,
          7,
          51,
          214,
          8,
          1,
          2,
          1,
          426,
          1263,
          17,
          1,
          2342,
          3,
          1,
          12,
          75,
          5,
          1,
          13,
          26,
          10,
          2224,
          4,
          1,
          5,
          1730,
          65,
          999,
          6,
          10,
          1279,
          71,
          2,
          24,
          19,
          8,
          1,
          51,
          171,
          7287,
          1,
          1,
          435,
          14,
          103,
          27,
          32,
          8568,
          83,
          3,
          447,
          1,
          10415,
          5,
          4,
          12129,
          22,
          3,
          4,
          18,
          2,
          9,
          128,
          4,
          1,
          29,
          1,
          100,
          230,
          35,
          2,
          152,
          3375,
          83,
          14,
          57,
          669,
          3766,
          6,
          8,
          21,
          197,
          19,
          6,
          2,
          1,
          2,
          133,
          16,
          2,
          31,
          8,
          1,
          3,
          7,
          81,
          287,
          55,
          16,
          259,
          4,
          1,
          12,
          85,
          10,
          1,
          18,
          1,
          5,
          67,
          1,
          7,
          2,
          28,
          2,
          1,
          1,
          34,
          1,
          2104,
          607,
          1,
          74,
          18,
          14,
          9,
          29,
          40,
          1,
          919,
          12,
          48590,
          4,
          1,
          15,
          500,
          632,
          2,
          48,
          1,
          11,
          39,
          1,
          2,
          1,
          101,
          2,
          5,
          65,
          57,
          1024,
          2,
          3,
          2,
          59,
          9,
          3,
          39,
          248,
          51,
          5,
          2,
          68,
          1,
          32,
          2097,
          4,
          26,
          1,
          8,
          80,
          2,
          4
         ]
        }
       ],
       "layout": {
        "coloraxis": {
         "colorbar": {
          "title": {
           "text": "count"
          }
         },
         "colorscale": [
          [
           0,
           "rgb(243, 203, 211)"
          ],
          [
           0.16666666666666666,
           "rgb(234, 169, 189)"
          ],
          [
           0.3333333333333333,
           "rgb(221, 136, 172)"
          ],
          [
           0.5,
           "rgb(202, 105, 157)"
          ],
          [
           0.6666666666666666,
           "rgb(177, 77, 142)"
          ],
          [
           0.8333333333333334,
           "rgb(145, 53, 125)"
          ],
          [
           1,
           "rgb(108, 33, 103)"
          ]
         ]
        },
        "geo": {
         "center": {},
         "domain": {
          "x": [
           0,
           1
          ],
          "y": [
           0,
           1
          ]
         }
        },
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Origin of Visitors"
        }
       }
      },
      "text/html": [
       "<div>                            <div id=\"846bc2a7-1335-47d5-bf05-764cc6c65961\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"846bc2a7-1335-47d5-bf05-764cc6c65961\")) {                    Plotly.newPlot(                        \"846bc2a7-1335-47d5-bf05-764cc6c65961\",                        [{\"coloraxis\": \"coloraxis\", \"geo\": \"geo\", \"hovertemplate\": \"<b>%{hovertext}</b><br><br>country=%{location}<br>count=%{z}<extra></extra>\", \"hovertext\": [\"ABW\", \"AGO\", \"AIA\", \"ALB\", \"AND\", \"ARE\", \"ARG\", \"ARM\", \"ASM\", \"ATA\", \"ATF\", \"AUS\", \"AUT\", \"AZE\", \"BDI\", \"BEL\", \"BEN\", \"BFA\", \"BGD\", \"BGR\", \"BHR\", \"BHS\", \"BIH\", \"BLR\", \"BOL\", \"BRA\", \"BRB\", \"BWA\", \"CAF\", \"CHE\", \"CHL\", \"CHN\", \"CIV\", \"CMR\", \"CN\", \"COL\", \"COM\", \"CPV\", \"CRI\", \"CUB\", \"CYM\", \"CYP\", \"CZE\", \"DEU\", \"DJI\", \"DMA\", \"DNK\", \"DOM\", \"DZA\", \"ECU\", \"EGY\", \"ESP\", \"EST\", \"ETH\", \"FIN\", \"FJI\", \"FRA\", \"FRO\", \"GAB\", \"GBR\", \"GEO\", \"GGY\", \"GHA\", \"GIB\", \"GLP\", \"GNB\", \"GRC\", \"GTM\", \"GUY\", \"HKG\", \"HND\", \"HRV\", \"HUN\", \"IDN\", \"IMN\", \"IND\", \"IRL\", \"IRN\", \"IRQ\", \"ISL\", \"ISR\", \"ITA\", \"JAM\", \"JEY\", \"JOR\", \"JPN\", \"KAZ\", \"KEN\", \"KHM\", \"KIR\", \"KNA\", \"KOR\", \"KWT\", \"LAO\", \"LBN\", \"LBY\", \"LCA\", \"LIE\", \"LKA\", \"LTU\", \"LUX\", \"LVA\", \"MAC\", \"MAR\", \"MCO\", \"MDG\", \"MDV\", \"MEX\", \"MKD\", \"MLI\", \"MLT\", \"MMR\", \"MNE\", \"MOZ\", \"MRT\", \"MUS\", \"MWI\", \"MYS\", \"MYT\", \"NAM\", \"NCL\", \"NGA\", \"NIC\", \"NLD\", \"NOR\", \"NPL\", \"NZL\", \"OMN\", \"PAK\", \"PAN\", \"PER\", \"PHL\", \"PLW\", \"POL\", \"PRI\", \"PRT\", \"PRY\", \"PYF\", \"QAT\", \"ROU\", \"RUS\", \"RWA\", \"SAU\", \"SDN\", \"SEN\", \"SGP\", \"SLE\", \"SLV\", \"SMR\", \"SRB\", \"STP\", \"SUR\", \"SVK\", \"SVN\", \"SWE\", \"SYC\", \"SYR\", \"TGO\", \"THA\", \"TJK\", \"TMP\", \"TUN\", \"TUR\", \"TWN\", \"TZA\", \"UGA\", \"UKR\", \"UMI\", \"URY\", \"USA\", \"UZB\", \"VEN\", \"VGB\", \"VNM\", \"ZAF\", \"ZMB\", \"ZWE\"], \"locations\": [\"ABW\", \"AGO\", \"AIA\", \"ALB\", \"AND\", \"ARE\", \"ARG\", \"ARM\", \"ASM\", \"ATA\", \"ATF\", \"AUS\", \"AUT\", \"AZE\", \"BDI\", \"BEL\", \"BEN\", \"BFA\", \"BGD\", \"BGR\", \"BHR\", \"BHS\", \"BIH\", \"BLR\", \"BOL\", \"BRA\", \"BRB\", \"BWA\", \"CAF\", \"CHE\", \"CHL\", \"CHN\", \"CIV\", \"CMR\", \"CN\", \"COL\", \"COM\", \"CPV\", \"CRI\", \"CUB\", \"CYM\", \"CYP\", \"CZE\", \"DEU\", \"DJI\", \"DMA\", \"DNK\", \"DOM\", \"DZA\", \"ECU\", \"EGY\", \"ESP\", \"EST\", \"ETH\", \"FIN\", \"FJI\", \"FRA\", \"FRO\", \"GAB\", \"GBR\", \"GEO\", \"GGY\", \"GHA\", \"GIB\", \"GLP\", \"GNB\", \"GRC\", \"GTM\", \"GUY\", \"HKG\", \"HND\", \"HRV\", \"HUN\", \"IDN\", \"IMN\", \"IND\", \"IRL\", \"IRN\", \"IRQ\", \"ISL\", \"ISR\", \"ITA\", \"JAM\", \"JEY\", \"JOR\", \"JPN\", \"KAZ\", \"KEN\", \"KHM\", \"KIR\", \"KNA\", \"KOR\", \"KWT\", \"LAO\", \"LBN\", \"LBY\", \"LCA\", \"LIE\", \"LKA\", \"LTU\", \"LUX\", \"LVA\", \"MAC\", \"MAR\", \"MCO\", \"MDG\", \"MDV\", \"MEX\", \"MKD\", \"MLI\", \"MLT\", \"MMR\", \"MNE\", \"MOZ\", \"MRT\", \"MUS\", \"MWI\", \"MYS\", \"MYT\", \"NAM\", \"NCL\", \"NGA\", \"NIC\", \"NLD\", \"NOR\", \"NPL\", \"NZL\", \"OMN\", \"PAK\", \"PAN\", \"PER\", \"PHL\", \"PLW\", \"POL\", \"PRI\", \"PRT\", \"PRY\", \"PYF\", \"QAT\", \"ROU\", \"RUS\", \"RWA\", \"SAU\", \"SDN\", \"SEN\", \"SGP\", \"SLE\", \"SLV\", \"SMR\", \"SRB\", \"STP\", \"SUR\", \"SVK\", \"SVN\", \"SWE\", \"SYC\", \"SYR\", \"TGO\", \"THA\", \"TJK\", \"TMP\", \"TUN\", \"TUR\", \"TWN\", \"TZA\", \"UGA\", \"UKR\", \"UMI\", \"URY\", \"USA\", \"UZB\", \"VEN\", \"VGB\", \"VNM\", \"ZAF\", \"ZMB\", \"ZWE\"], \"name\": \"\", \"type\": \"choropleth\", \"z\": [2, 362, 1, 12, 7, 51, 214, 8, 1, 2, 1, 426, 1263, 17, 1, 2342, 3, 1, 12, 75, 5, 1, 13, 26, 10, 2224, 4, 1, 5, 1730, 65, 999, 6, 10, 1279, 71, 2, 24, 19, 8, 1, 51, 171, 7287, 1, 1, 435, 14, 103, 27, 32, 8568, 83, 3, 447, 1, 10415, 5, 4, 12129, 22, 3, 4, 18, 2, 9, 128, 4, 1, 29, 1, 100, 230, 35, 2, 152, 3375, 83, 14, 57, 669, 3766, 6, 8, 21, 197, 19, 6, 2, 1, 2, 133, 16, 2, 31, 8, 1, 3, 7, 81, 287, 55, 16, 259, 4, 1, 12, 85, 10, 1, 18, 1, 5, 67, 1, 7, 2, 28, 2, 1, 1, 34, 1, 2104, 607, 1, 74, 18, 14, 9, 29, 40, 1, 919, 12, 48590, 4, 1, 15, 500, 632, 2, 48, 1, 11, 39, 1, 2, 1, 101, 2, 5, 65, 57, 1024, 2, 3, 2, 59, 9, 3, 39, 248, 51, 5, 2, 68, 1, 32, 2097, 4, 26, 1, 8, 80, 2, 4]}],                        {\"coloraxis\": {\"colorbar\": {\"title\": {\"text\": \"count\"}}, \"colorscale\": [[0.0, \"rgb(243, 203, 211)\"], [0.16666666666666666, \"rgb(234, 169, 189)\"], [0.3333333333333333, \"rgb(221, 136, 172)\"], [0.5, \"rgb(202, 105, 157)\"], [0.6666666666666666, \"rgb(177, 77, 142)\"], [0.8333333333333334, \"rgb(145, 53, 125)\"], [1.0, \"rgb(108, 33, 103)\"]]}, \"geo\": {\"center\": {}, \"domain\": {\"x\": [0.0, 1.0], \"y\": [0.0, 1.0]}}, \"legend\": {\"tracegroupgap\": 0}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"Origin of Visitors\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('846bc2a7-1335-47d5-bf05-764cc6c65961');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "visitors = df.groupby(['country']).size().reset_index(name = 'count')\n",
    "import plotly.express as px\n",
    "px.choropleth(visitors,\n",
    "                    locations = \"country\",\n",
    "                    color= \"count\" ,\n",
    "                    hover_name= \"country\", \n",
    "                    color_continuous_scale=\"magenta\",\n",
    "                    title=\"Origin of Visitors\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Top 5 countries by origin of booking\n",
    "plt.figure(figsize=(10,6))\n",
    "ax = sns.countplot(x='country', data=df, \n",
    "              order=pd.value_counts(df['country']).iloc[:6].index, palette=\"Purples_r\",edgecolor='black')\n",
    "plt.title('Top 6 Countries by Origin of Booking', weight='bold')\n",
    "plt.xlabel('Country', fontsize=12)\n",
    "plt.ylabel('Count', fontsize=12)\n",
    "\n",
    "for p in ax.patches: \n",
    "    height = p.get_height()\n",
    "    ax.text(x = p.get_x()+(p.get_width()/2),\n",
    "    y = height+0.2, \n",
    "    s = '{:.0f}'.format(height), \n",
    "    ha = 'center')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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c2Y3bH5tf5ak3nrrrdfhuOWWa/+70G233faO29QdG43ciFmzZzVkXr2p/tT26quv3mX9O++8k1VWWaXdU9eXXnopF154YV80s984/PDDOe644zj00ENbyz772c9yxhlnsPPOOzNp0iR+8IMfcOqpp7LlllsyZcoUBg0axNNPP83YsWPZe++9GTSo+Kg4++yzGT16dGv4k7RsMMxpmTN7zmzu/t3UrisOcBP2HtfsJvRY21Pb3XHppZe2e1TuvvvuY+HChUyYMKG3m9mv7LTTTsycOXOJskcffZSddtoJgN13350PfehDnHrqqayyyiqtdV5//fUljni2tLTw+9//nm984xuceeaZDWm7pO7xNKukhmjv1HZXFi1axOWXX86BBx641LiOrqNT17bccksmT54MFL2J58yZ0zruzjvvZMyYMWy11Vacd955rUflvvjFL/L973+/wyPSkprHI3OS2HjkRsxumdN1xV7S0antf/mXf2m3fNNNN+1wWrV/42iEjUaMZFYDLwHoK5MmTeLzn/88p5xyCh/96EdZccUVW8dtt912PPjggzz88MMcdthh7LXXXtxwww0MHTqUCRMm8Oc//7l5DZfULsOcJGa3zOGvP7AXble2/+qezW5Cr9hiiy1af4Lnscce4/e///1SdUaPHs2qq67KAw88wO23387kyZO59tpref3115k/fz6f+tSnuOiiixrddEnt8Hi5JA0wc+fOBYrT2N/5znc45phjAHjiiSdYuHAhALNmzeLRRx9l1KhRnH766bS0tDBz5kwuvfRSPvCBDxjkOtFeD+JvfvObbL311owbN4499tiDp556CoCrr766tXzixImtHahmzZrFhAkTGDduHGPGjOG8885ryrKoGqL2cwsD0cSJE7P+F+fbExG0PD63QS2qrhGbDKW3tqWIsANEN0zYe1yvrnOPzHVt+6/u2WvrfOPhI5n9VEuvTKs/22jDEcx6snGXAPSGv/zlLwwZMoRDDz2UBx54AID58+e39t7+8Y9/zEMPPcR5553HK6+8wqqrrkpEMG3aND75yU/yyCOP8Oabb5KZDB48mFdeeYUtt9yS//3f/2XDDTds5qKpySLi7syc2Lbc06yS1ASzn2rh3k96tKUr2/zmmGY3ocfa60Fc/zM8r776amtP4dqPkbctr7+O8Y033mDRokV92OLqO+KII7jmmmsYOnRoa4D+6le/yu9+9ztWXHFFNt10U375y1+y5ppr8vzzz/Pxj3+cu+66i8MPP5yf/OQnrdO55JJL+M///E8igg033JCLLrqIddddt1mL1W2eZpUkqQG+8Y1vMHLkSC6++OIlOu5cddVVbLHFFvzrv/4rkyZNai2fM2cOW2+9NSNHjuRrX/uaR+U6cfjhhy/17zu77747DzzwANOmTeM973kPp59+OgArrbQSp556KmecccYS9RcuXMgXvvAFbr75ZqZNm8bWW2+9RNBblhnmJElqgNNOO405c+ZwyCGHLBES9ttvPx555BF++9vf8s1vfrO1fOTIkUybNo0ZM2Zw/vnn8+yzzzaj2ZWw0047sfbaay9Rtscee7T+tM72229PS0txWcOqq67KDjvswEorrbRE/cwkM3n11VfJTObPn1+ZAG2YkySpgQ4++GCuuOKKpcp32mkn/v73vy/1v88bbrghY8aM4dZbb21UE/udSZMmsddee3VaZ4UVVuDcc89lq622YsMNN+Shhx7iyCOPbFAL3xnDnCRJfWz69OmtjydPntz6H84zZsxo7VRzzz338Oabb7LOOuvQ0tLCa6+9BsCLL77I7bffzuabb974hvcDp512GoMGDeKQQw7ptN6CBQs499xzuffee3nqqafYeuutW0/NLuvsACFJUi866KCD+POf/8xzzz3HiBEj+Pa3v821117Lo48+ynLLLcfGG2/c+lMjV1xxBRdccAErrLACK6+8MpdddhkRwcMPP8yXv/xlIoLM5Ctf+QpbbbVVk5eses4//3yuueYabrzxxiX+nq49U6cWv6JQ+5HyT37yk3z3u9/t8zb2BsOcJGlA2GjDEcx5+smGzvPJJ5/ks5/97BJl999/PyNGjGi3/o477thu+dFHH83RRx/d6+1rz8hhw/vFz+b88Y9/5Hvf+x633HLLEv873JHhw4fz0EMPMW/ePNZbbz2uv/56Ro8e3YCWvnOGOUnSgDDn6Se5adz/aXYzlnkfmPpfvTatkcOG0/LMU702ve5oewRu6NChndY/55xzOq1/5pln9k7DOjFigw3f0RcNw5wkSeoTLc88xQ+G9o+/wetLX33mnf1oux0gJEmSKswwJ0mSVGGGOUmSpAozzEmSJFWYYU6SJKnCDHOSJEkVZpiTJEmqMMOcJElShfWrMBcRe0bEoxExIyJO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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Top 5 countries by origin of booking, cancelations only, city hotel only\n",
    "canceled = df.loc[(df['is_canceled'])== 1]\n",
    "plt.figure(figsize=(10,6))\n",
    "axc = sns.countplot(x='country', data=canceled, \n",
    "              order=pd.value_counts(canceled['country']).iloc[:6].index, palette=\"PuRd\",edgecolor='black')\n",
    "plt.title('Top 6 Countries by Origin of Booking, Cancelations Only', weight='bold')\n",
    "plt.xlabel('Country', fontsize=12)\n",
    "plt.ylabel('Count', fontsize=12)\n",
    "\n",
    "for p in axc.patches: \n",
    "    height = p.get_height()\n",
    "    axc.text(x = p.get_x()+(p.get_width()/2),\n",
    "    y = height+0.2, \n",
    "    s = '{:.0f}'.format(height), \n",
    "    ha = 'center')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Percentage of cancelations per country of origin:\n",
    "- Portugal: **56%**\n",
    "- Italy: **35%**\n",
    "- Spain: **25%**\n",
    "- Great Britain: **20%**\n",
    "- France: **18%**\n",
    "- Germany: **17%**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Percentage of cancelations per country of origin for City Hotel only:\n",
    "- Portugal: **65%**\n",
    "- Italy: **38%**\n",
    "- Great Britain: **29%**\n",
    "- Spain: **28%**\n",
    "- France: **20%**\n",
    "- Germany: **18%**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **4 European countries (Portugal, Italy, Great Britain, and Spain)** have a higher percent of cancelations relative to the number of bookings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [],
   "source": [
    "top4 = df.loc[df['country'].isin(['PRT','ESP','ITA','GBR'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "posx and posy should be finite values\n",
      "posx and posy should be finite values\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "city_top4 = top4.loc[(top4['hotel'])== 'City Hotel']\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "ax = sns.countplot(city_top3['market_segment'], color= 'purple', hue = city_top4['is_canceled'], order=pd.value_counts(city_top4['market_segment']).index)\n",
    "plt.title('Cancelations by Market Segment Types, City Hotel in PRT, ITA, GRB, and ESP', weight='bold')\n",
    "plt.xlabel('Market Segment', fontsize=12)\n",
    "plt.ylabel('Count', fontsize=12)\n",
    "\n",
    "for p in ax.patches: \n",
    "    height = p.get_height()\n",
    "    ax.text(x = p.get_x()+(p.get_width()/2),\n",
    "    y = height+0.2, \n",
    "    s = '{:.0f}'.format(height), \n",
    "    ha = 'center')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For the 4 European countries, **Groups** cancel a staggering **80%** of bookings made by that Market Segment, while **Offline TA/TO** cancel **64%** of bookings and **Online TA**  - **42%**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [],
   "source": [
    "groups = city_top4.loc[(city_top4['market_segment'])== 'Groups']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [],
   "source": [
    "online_ta = city_top4.loc[(city_top4['market_segment'])== 'Online TA']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [],
   "source": [
    "offline_ta = city_top4.loc[(city_top4['market_segment'])== 'Offline TA/TO']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Let's explore the Deposit Type for the top canceling Market Segments (Groups, Offline TA/TO, Online TA) for the City Hotel in the 4 European countries to get some insights into why the cancelations might be happening"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8))\n",
    "ax = sns.countplot(groups['deposit_type'], color='violet', hue = groups['is_canceled'], order=pd.value_counts(groups['deposit_type']).index)\n",
    "plt.title('GROUPS', weight='bold')\n",
    "plt.xlabel('Deposit Type', fontsize=12)\n",
    "plt.ylabel('Count', fontsize=12)\n",
    "\n",
    "for p in ax.patches:\n",
    "  if float(p.get_height()) > 0:\n",
    "    height = p.get_height()\n",
    "  else:\n",
    "   height = .00000001\n",
    "  ax.text(x = p.get_x()+(p.get_width()/2),\n",
    "  y = height+0.2, \n",
    "  s = '{:.0f}'.format(height), \n",
    "  ha = 'center') \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8))\n",
    "ax = sns.countplot(offline_ta['deposit_type'], color='purple', hue = offline_ta['is_canceled'], order=pd.value_counts(offline_ta['deposit_type']).index)\n",
    "plt.title('OFFLINE TA/TO', weight='bold')\n",
    "plt.xlabel('Deposit Type', fontsize=12)\n",
    "plt.ylabel('Count', fontsize=12)\n",
    "\n",
    "for p in ax.patches:\n",
    "  if float(p.get_height()) > 0:\n",
    "    height = p.get_height()\n",
    "  else:\n",
    "   height = .00000001\n",
    "  ax.text(x = p.get_x()+(p.get_width()/2),\n",
    "  y = height+0.2, \n",
    "  s = '{:.0f}'.format(height), \n",
    "  ha = 'center') \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8))\n",
    "ax = sns.countplot(online_ta['deposit_type'], color='pink', hue = online_ta['is_canceled'], order=pd.value_counts(online_ta['deposit_type']).index)\n",
    "plt.title('ONLINE TA', weight='bold')\n",
    "plt.xlabel('Deposit Type', fontsize=12)\n",
    "plt.ylabel('Count', fontsize=12)\n",
    "\n",
    "for p in ax.patches:\n",
    "  if float(p.get_height()) > 0:\n",
    "    height = p.get_height()\n",
    "  else:\n",
    "   height = .00000001\n",
    "  ax.text(x = p.get_x()+(p.get_width()/2),\n",
    "  y = height+0.2, \n",
    "  s = '{:.0f}'.format(height), \n",
    "  ha = 'center') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 100% of non-refundable bookings got canceled by the Groups and Offline TA/TO segments. For the bookings with no deposit, we saw a 44% cancelation rate for Groups, 37% for Offline TA/TO, and 41% for Online TA."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Let's next explore cancelations by Room Type in the City Hotel in the 4 European countries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of Bookings by Room Type\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "A    0.846650\n",
       "D    0.102482\n",
       "F    0.017446\n",
       "E    0.015297\n",
       "B    0.011834\n",
       "G    0.005974\n",
       "C    0.000272\n",
       "P    0.000045\n",
       "Name: reserved_room_type, dtype: float64"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Percentage of Bookings by Room Type\")\n",
    "city_top4.reserved_room_type.value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8))\n",
    "ax = sns.countplot(groups['reserved_room_type'], color='violet', hue = groups['is_canceled'], order=pd.value_counts(groups['reserved_room_type']).index)\n",
    "plt.title('Cancelations by Room Types, Groups', weight='bold')\n",
    "plt.xlabel('Deposit Type', fontsize=12)\n",
    "plt.ylabel('Count', fontsize=12)\n",
    "\n",
    "for p in ax.patches: \n",
    "    height = p.get_height()\n",
    "    ax.text(x = p.get_x()+(p.get_width()/2),\n",
    "    y = height+0.2, \n",
    "    s = '{:.0f}'.format(height), \n",
    "    ha = 'center') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8))\n",
    "ax = sns.countplot(offline_ta['reserved_room_type'], color='purple', hue = offline_ta['is_canceled'], order=pd.value_counts(offline_ta['reserved_room_type']).index)\n",
    "plt.title('Cancelations by Room Types,Offline TA/TO', weight='bold')\n",
    "plt.xlabel('Deposit Type', fontsize=12)\n",
    "plt.ylabel('Count', fontsize=12)\n",
    "\n",
    "for p in ax.patches: \n",
    "    height = p.get_height()\n",
    "    ax.text(x = p.get_x()+(p.get_width()/2),\n",
    "    y = height+0.2, \n",
    "    s = '{:.0f}'.format(height), \n",
    "    ha = 'center') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8))\n",
    "ax = sns.countplot(online_ta['reserved_room_type'], color='pink', hue = online_ta['is_canceled'], order=pd.value_counts(online_ta['reserved_room_type']).index)\n",
    "plt.title('Cancelations by Room Types, Online TA', weight='bold')\n",
    "plt.xlabel('Deposit Type', fontsize=12)\n",
    "plt.ylabel('Count', fontsize=12)\n",
    "\n",
    "for p in ax.patches:\n",
    "  if float(p.get_height()) > 0:\n",
    "    height = p.get_height()\n",
    "  else:\n",
    "   height = .00000001\n",
    "  ax.text(x = p.get_x()+(p.get_width()/2),\n",
    "  y = height+0.2, \n",
    "  s = '{:.0f}'.format(height), \n",
    "  ha = 'center') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### When we take a look at cancelations by Room Type, room A is a leader in cancelations, with 81% of A rooms canceled by Groups, 69% by Offline TA/TO, and 42% by Online TA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Room Price for City Hotel in Top 4 Countries\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>adr</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reserved_room_type</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>92.423414</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>84.547744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>79.729167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>128.010300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>146.851198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>180.763126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>179.090303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>P</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           adr\n",
       "reserved_room_type            \n",
       "A                    92.423414\n",
       "B                    84.547744\n",
       "C                    79.729167\n",
       "D                   128.010300\n",
       "E                   146.851198\n",
       "F                   180.763126\n",
       "G                   179.090303\n",
       "P                     0.000000"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# What is the average price for the rooms?\n",
    "print(\"Average Room Price for City Hotel in Top 4 Countries\")\n",
    "city_top4.groupby(['reserved_room_type']).agg({'adr':\"mean\"})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "# changing the necessary columns with categorical data to 0s and 1s:\n",
    "categ = ['market_segment','deposit_type','reserved_room_type','customer_type']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>is_canceled</th>\n",
       "      <th>lead_time</th>\n",
       "      <th>arrival_date_year</th>\n",
       "      <th>arrival_date_week_number</th>\n",
       "      <th>arrival_date_day_of_month</th>\n",
       "      <th>stays_in_weekend_nights</th>\n",
       "      <th>stays_in_week_nights</th>\n",
       "      <th>adults</th>\n",
       "      <th>children</th>\n",
       "      <th>babies</th>\n",
       "      <th>...</th>\n",
       "      <th>reserved_room_type_C</th>\n",
       "      <th>reserved_room_type_D</th>\n",
       "      <th>reserved_room_type_E</th>\n",
       "      <th>reserved_room_type_F</th>\n",
       "      <th>reserved_room_type_G</th>\n",
       "      <th>reserved_room_type_P</th>\n",
       "      <th>customer_type_Contract</th>\n",
       "      <th>customer_type_Group</th>\n",
       "      <th>customer_type_Transient</th>\n",
       "      <th>customer_type_Transient-Party</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>40060</th>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2015</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40061</th>\n",
       "      <td>1</td>\n",
       "      <td>88</td>\n",
       "      <td>2015</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40062</th>\n",
       "      <td>1</td>\n",
       "      <td>65</td>\n",
       "      <td>2015</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40063</th>\n",
       "      <td>1</td>\n",
       "      <td>92</td>\n",
       "      <td>2015</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40064</th>\n",
       "      <td>1</td>\n",
       "      <td>100</td>\n",
       "      <td>2015</td>\n",
       "      <td>27</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       is_canceled  lead_time  arrival_date_year  arrival_date_week_number  \\\n",
       "40060            0          6               2015                        27   \n",
       "40061            1         88               2015                        27   \n",
       "40062            1         65               2015                        27   \n",
       "40063            1         92               2015                        27   \n",
       "40064            1        100               2015                        27   \n",
       "\n",
       "       arrival_date_day_of_month  stays_in_weekend_nights  \\\n",
       "40060                          1                        0   \n",
       "40061                          1                        0   \n",
       "40062                          1                        0   \n",
       "40063                          1                        2   \n",
       "40064                          2                        0   \n",
       "\n",
       "       stays_in_week_nights  adults  children  babies  ...  \\\n",
       "40060                     2       1       0.0       0  ...   \n",
       "40061                     4       2       0.0       0  ...   \n",
       "40062                     4       1       0.0       0  ...   \n",
       "40063                     4       2       0.0       0  ...   \n",
       "40064                     2       2       0.0       0  ...   \n",
       "\n",
       "       reserved_room_type_C  reserved_room_type_D  reserved_room_type_E  \\\n",
       "40060                     0                     0                     0   \n",
       "40061                     0                     0                     0   \n",
       "40062                     0                     0                     0   \n",
       "40063                     0                     0                     0   \n",
       "40064                     0                     0                     0   \n",
       "\n",
       "       reserved_room_type_F  reserved_room_type_G  reserved_room_type_P  \\\n",
       "40060                     0                     0                     0   \n",
       "40061                     0                     0                     0   \n",
       "40062                     0                     0                     0   \n",
       "40063                     0                     0                     0   \n",
       "40064                     0                     0                     0   \n",
       "\n",
       "       customer_type_Contract  customer_type_Group  customer_type_Transient  \\\n",
       "40060                       0                    0                        1   \n",
       "40061                       0                    0                        1   \n",
       "40062                       0                    0                        1   \n",
       "40063                       0                    0                        1   \n",
       "40064                       0                    0                        1   \n",
       "\n",
       "       customer_type_Transient-Party  \n",
       "40060                              0  \n",
       "40061                              0  \n",
       "40062                              0  \n",
       "40063                              0  \n",
       "40064                              0  \n",
       "\n",
       "[5 rows x 41 columns]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data = data.drop(['hotel','arrival_date_month','meal','country','distribution_channel','assigned_room_type','reservation_status','reservation_status_date'], axis = 1)\n",
    "new_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(38878, 41)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Index(['hotel', 'is_canceled', 'lead_time', 'arrival_date_year',\n",
       "       'arrival_date_month', 'arrival_date_week_number',\n",
       "       'arrival_date_day_of_month', 'stays_in_weekend_nights',\n",
       "       'stays_in_week_nights', 'adults', 'children', 'babies', 'meal',\n",
       "       'country', 'distribution_channel', 'is_repeated_guest',\n",
       "       'previous_cancellations', 'previous_bookings_not_canceled',\n",
       "       'assigned_room_type', 'booking_changes', 'days_in_waiting_list', 'adr',\n",
       "       'required_car_parking_spaces', 'total_of_special_requests',\n",
       "       'reservation_status', 'reservation_status_date',\n",
       "       'market_segment_Aviation', 'market_segment_Complementary',\n",
       "       'market_segment_Corporate', 'market_segment_Direct',\n",
       "       'market_segment_Groups', 'market_segment_Offline TA/TO',\n",
       "       'market_segment_Online TA', 'market_segment_Undefined',\n",
       "       'deposit_type_No Deposit', 'deposit_type_Non Refund',\n",
       "       'deposit_type_Refundable', 'reserved_room_type_A',\n",
       "       'reserved_room_type_B', 'reserved_room_type_C', 'reserved_room_type_D',\n",
       "       'reserved_room_type_E', 'reserved_room_type_F', 'reserved_room_type_G',\n",
       "       'reserved_room_type_P', 'customer_type_Contract', 'customer_type_Group',\n",
       "       'customer_type_Transient', 'customer_type_Transient-Party'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.get_dummies(city_top3, columns = categ)\n",
    "print(new_data.shape)\n",
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_data = new_data.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "# split the data into X and y:\n",
    "X = new_data.drop('is_canceled', axis=1)\n",
    "y = new_data['is_canceled']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',\n",
       "                       max_depth=10, max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
       "                       random_state=15, splitter='best')"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# run a Tree based estimator\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import r2_score, explained_variance_score, confusion_matrix, accuracy_score, classification_report\n",
    "dtree = DecisionTreeClassifier(random_state = 15, criterion = 'entropy', max_depth = 10)\n",
    "dtree.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The feature importance for lead_time is : 0.10001344271948923\n",
      "The feature importance for arrival_date_year is : 0.03830427870983554\n",
      "The feature importance for arrival_date_week_number is : 0.02163768067526127\n",
      "The feature importance for arrival_date_day_of_month is : 0.0075914847993421904\n",
      "The feature importance for stays_in_weekend_nights is : 0.006084903541313977\n",
      "The feature importance for stays_in_week_nights is : 0.003318519811420465\n",
      "The feature importance for adults is : 0.003957867942025588\n",
      "The feature importance for children is : 0.0005609984538803409\n",
      "The feature importance for babies is : 0.0\n",
      "The feature importance for is_repeated_guest is : 0.0017674033863796933\n",
      "The feature importance for previous_cancellations is : 0.07750937058443134\n",
      "The feature importance for previous_bookings_not_canceled is : 0.016226606090338144\n",
      "The feature importance for booking_changes is : 0.02220117372861652\n",
      "The feature importance for days_in_waiting_list is : 0.004007901924831239\n",
      "The feature importance for adr is : 0.009273357055805866\n",
      "The feature importance for required_car_parking_spaces is : 0.024786164426169207\n",
      "The feature importance for total_of_special_requests is : 0.02520181514533769\n",
      "The feature importance for market_segment_Aviation is : 0.0009732897005068006\n",
      "The feature importance for market_segment_Complementary is : 0.0\n",
      "The feature importance for market_segment_Corporate is : 0.0006367634424289804\n",
      "The feature importance for market_segment_Direct is : 0.00136878123706532\n",
      "The feature importance for market_segment_Groups is : 0.0032260699999245284\n",
      "The feature importance for market_segment_Offline TA/TO is : 0.000536336968352685\n",
      "The feature importance for market_segment_Online TA is : 0.012266096144533724\n",
      "The feature importance for market_segment_Undefined is : 0.0\n",
      "The feature importance for deposit_type_No Deposit is : 0.0\n",
      "The feature importance for deposit_type_Non Refund is : 0.5900603526659436\n",
      "The feature importance for deposit_type_Refundable is : 0.0\n",
      "The feature importance for reserved_room_type_A is : 0.0008468705779234729\n",
      "The feature importance for reserved_room_type_B is : 0.0006300405078382024\n",
      "The feature importance for reserved_room_type_C is : 0.0\n",
      "The feature importance for reserved_room_type_D is : 0.00019329212676699335\n",
      "The feature importance for reserved_room_type_E is : 0.004599327409703236\n",
      "The feature importance for reserved_room_type_F is : 0.0\n",
      "The feature importance for reserved_room_type_G is : 0.0\n",
      "The feature importance for reserved_room_type_P is : 0.0\n",
      "The feature importance for customer_type_Contract is : 0.0\n",
      "The feature importance for customer_type_Group is : 0.0\n",
      "The feature importance for customer_type_Transient is : 0.00484305727942034\n",
      "The feature importance for customer_type_Transient-Party is : 0.01737675294511391\n"
     ]
    }
   ],
   "source": [
    "# running feature importance\n",
    "\n",
    "fi_col = []\n",
    "fi = []\n",
    "\n",
    "for i, column in enumerate(new_data.drop('is_canceled', axis=1)):\n",
    "    print(\"The feature importance for {} is : {}\".format(column,dtree.feature_importances_[i]))\n",
    "    \n",
    "    fi_col.append(column)\n",
    "    fi.append(dtree.feature_importances_[i])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0            deposit_type_Non Refund\n",
       "1                          lead_time\n",
       "2             previous_cancellations\n",
       "3                  arrival_date_year\n",
       "4          total_of_special_requests\n",
       "5        required_car_parking_spaces\n",
       "6                    booking_changes\n",
       "7           arrival_date_week_number\n",
       "8      customer_type_Transient-Party\n",
       "9     previous_bookings_not_canceled\n",
       "10          market_segment_Online TA\n",
       "11                               adr\n",
       "12         arrival_date_day_of_month\n",
       "13           stays_in_weekend_nights\n",
       "14           customer_type_Transient\n",
       "15              reserved_room_type_E\n",
       "16              days_in_waiting_list\n",
       "17                            adults\n",
       "18              stays_in_week_nights\n",
       "19             market_segment_Groups\n",
       "20                 is_repeated_guest\n",
       "21             market_segment_Direct\n",
       "22           market_segment_Aviation\n",
       "23              reserved_room_type_A\n",
       "24          market_segment_Corporate\n",
       "25              reserved_room_type_B\n",
       "26                          children\n",
       "27      market_segment_Offline TA/TO\n",
       "28              reserved_room_type_D\n",
       "Name: Feature, dtype: object"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# only keeping the features that have importance\n",
    "fi_df = zip(fi_col, fi)\n",
    "fi_df = pd.DataFrame(fi_df, columns = ['Feature','Feature Importance'])\n",
    "fi_df = fi_df.sort_values('Feature Importance', ascending = False).reset_index()\n",
    "fi_df\n",
    "\n",
    "cols_keep = fi_df['Feature'][0:29]\n",
    "cols_keep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(38874, 41)\n",
      "(38874, 29)\n"
     ]
    }
   ],
   "source": [
    "print(new_data.shape)\n",
    "print(new_data[cols_keep].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Splitting the raw data. Hold out validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "# split the data into X and y\n",
    "X = new_data[cols_keep].values\n",
    "\n",
    "y = new_data['is_canceled']\n",
    "\n",
    "#print(X.shape)\n",
    "#print(y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(27989, 29)\n",
      "(7775, 29)\n",
      "(3110, 29)\n",
      "(27989,)\n",
      "(7775,)\n",
      "(3110,)\n"
     ]
    }
   ],
   "source": [
    "# split the data into Train and Test\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.8, test_size=0.2, random_state = 15)\n",
    "\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, train_size = 0.9, test_size=0.1, random_state = 15)\n",
    "\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "print(X_valid.shape)\n",
    "\n",
    "print(y_train.shape)\n",
    "print(y_test.shape)\n",
    "print(y_valid.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# checking the distribution\n",
    "plt.figure(figsize=(5,5))\n",
    "ax = sns.countplot(x = y_train, palette='pink')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(5,5))\n",
    "ax = sns.countplot(x = y_test, palette='pink')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(5,5))\n",
    "ax = sns.countplot(x = y_valid, palette='pink')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=10000,\n",
       "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
       "                   random_state=10, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# running Logistic Regression\n",
    "\n",
    "log_reg = LogisticRegression(random_state = 10, max_iter=10000)\n",
    "log_reg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 5.78712067e+00,  4.72375605e-03,  2.55842334e+00,\n",
       "        -6.73129858e-04, -7.30720656e-01, -2.48494740e+00,\n",
       "        -6.75722597e-01, -2.62005967e-03, -5.94935877e-01,\n",
       "        -4.27610782e-01,  5.72962040e-01,  3.72406642e-03,\n",
       "         3.04485574e-03,  1.50185118e-01, -2.66453179e-01,\n",
       "         2.18343055e-02,  1.76998365e-04,  1.40368640e-01,\n",
       "         1.45878322e-01,  1.37611060e-01, -5.31116203e-01,\n",
       "        -2.00982321e-01,  8.03838417e-02,  5.43184138e-02,\n",
       "        -3.76706848e-01,  9.48678934e-02,  2.33136655e-02,\n",
       "         6.76130694e-02, -5.42391906e-02]])"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Predict class labels for samples in X\n",
    "log_reg.predict(X_train)\n",
    "\n",
    "y_pred = log_reg.predict(X_train)\n",
    "\n",
    "# predicting probabilities\n",
    "\n",
    "pred_proba = log_reg.predict_proba(X_train)\n",
    "\n",
    "# Coefficient of the features in the decision function\n",
    "log_reg.coef_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluating the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The training accuracy is: 0.8228881957619216\n",
      "The testing accuracy is: 0.8227652733118971\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.74      0.88      0.80     12861\n",
      "           1       0.90      0.78      0.84     18238\n",
      "\n",
      "    accuracy                           0.82     31099\n",
      "   macro avg       0.82      0.83      0.82     31099\n",
      "weighted avg       0.84      0.82      0.82     31099\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"The training accuracy is:\", log_reg.score(X_train, y_train))\n",
    "\n",
    "print(\"The testing accuracy is:\", log_reg.score(X_test, y_test))\n",
    "\n",
    "# Classification Report\n",
    "print(classification_report(y_train, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluating the model by creating a confusion matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import metrics\n",
    "cm = metrics.confusion_matrix(y_train, y_pred)\n",
    "cnf_norm = cnf_matrix / cm.sum(axis = 1).reshape(-1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 384.16, 'Predicted label')"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "class_names=[0,1] # name  of classes\n",
    "fig, ax = plt.subplots(figsize=(6, 6))\n",
    "tick_marks = np.arange(len(class_names))\n",
    "plt.xticks(tick_marks, class_names)\n",
    "plt.yticks(tick_marks, class_names)\n",
    "# create heatmap\n",
    "\n",
    "sns.heatmap(pd.DataFrame(cnf_norm), annot=True, fmt='.1%')\n",
    "ax.xaxis.set_label_position(\"top\")\n",
    "plt.tight_layout()\n",
    "plt.title('Confusion matrix (%)', y=1.1)\n",
    "plt.ylabel('Actual label')\n",
    "plt.xlabel('Predicted label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The True Positive Rate is [0.88072467 0.7821033 ]\n",
      "The Precision is [0.74027841 0.9028991 ]\n",
      "The False Positive Rate is [0.2178967  0.11927533]\n",
      "The False Negative Rate is [0.11927533 0.2178967 ]\n",
      "\n",
      "\n",
      "The average TPR is 0.8314139861439844\n",
      "The average Precision is 0.821588757163827\n",
      "The average False Positive Rate is 0.1685860138560155\n",
      "The average False Negative Rage is 0.1685860138560155\n"
     ]
    }
   ],
   "source": [
    "# Calculating false positives (FP), false negatives (FN), true positives (TP) and true negatives (TN)\n",
    "\n",
    "FP = cm.sum(axis=0) - np.diag(cm)\n",
    "FN = cm.sum(axis=1) - np.diag(cm)\n",
    "TP = np.diag(cm)\n",
    "TN = cm.sum() - (FP + FN + TP)\n",
    "\n",
    "# Calculating true positive rate\n",
    "TPR = TP/ (TP + FN)\n",
    "print(\"The True Positive Rate is\", TPR)\n",
    "\n",
    "# Calculating positive predictive value\n",
    "PPV = TP / (TP + FP)\n",
    "print(\"The Precision is\", PPV)\n",
    "\n",
    "# Calculatine false alarm rate (false positive rate)\n",
    "FPR = FP / (FP + TN)\n",
    "print(\"The False Positive Rate is\", FPR)\n",
    "\n",
    "# Calculating false negative rate (miss rate)\n",
    "FNR = FN / (FN + TP)\n",
    "print(\"The False Negative Rate is\", FNR)\n",
    "\n",
    "# Total averages:\n",
    "print()\n",
    "print()\n",
    "print(\"The average TPR is\", TPR.sum() / 2)\n",
    "print(\"The average Precision is\", PPV.sum() / 2)\n",
    "print(\"The average False Positive Rate is\", FPR.sum() / 2)\n",
    "print(\"The average False Negative Rage is\", FNR.sum() / 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logarithmic Loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Log Loss on Training Dataset is 0.3632229447439865\n",
      "The Log Loss on Testing Dataset is 0.3628751043965907\n"
     ]
    }
   ],
   "source": [
    "# Running log loss on the training dataset\n",
    "from sklearn.metrics import log_loss\n",
    "print(\"The Log Loss on Training Dataset is\", log_loss(y_train, pred_proba))\n",
    "\n",
    "pred_proba_t = log_reg.predict_proba(X_test)\n",
    "print(\"The Log Loss on Testing Dataset is\", log_loss(y_test, pred_proba_t))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hyper Parameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Looping over parameter C (inverse of regularization strength)\n",
    "# Inverse of reglurazation strength helps avoid overfitting, it penalizes large values of the parameters\n",
    "# It helps to find Global Minimum by moving to better \"solutions\" from local minimum to global minimum\n",
    "# The values of C to search should be N equally spaced values in log space raging from 1e-5 to 1e5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a29e4fc90>]"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a range for C values\n",
    "np.geomspace(1e-5,1e5,num=20)\n",
    "\n",
    "plt.figure(figsize=(6,6))\n",
    "plt.plot(np.geomspace(1e-5,1e5,num=20)) # uniformly distributed in log space\n",
    "plt.plot(np.linspace(1e-5,1e5,num=20)) # uniformaly distributed in linear space"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Classification Accuracy of C parameter 1e-05 is 0.7228295819935692:\n",
      "The Log Loss of C Parameter 1e-05 is 0.5520700947111348:\n",
      "\n",
      "The Classification Accuracy of C parameter 3.359818286283781e-05 is 0.7355627009646303:\n",
      "The Log Loss of C Parameter 3.359818286283781e-05 is 0.5405339272654515:\n",
      "\n",
      "The Classification Accuracy of C parameter 0.00011288378916846884 is 0.7581993569131833:\n",
      "The Log Loss of C Parameter 0.00011288378916846884 is 0.5129449721417297:\n",
      "\n",
      "The Classification Accuracy of C parameter 0.000379269019073225 is 0.7804501607717041:\n",
      "The Log Loss of C Parameter 0.000379269019073225 is 0.46906141257051787:\n",
      "\n",
      "The Classification Accuracy of C parameter 0.0012742749857031334 is 0.7963987138263665:\n",
      "The Log Loss of C Parameter 0.0012742749857031334 is 0.4259075740237769:\n",
      "\n",
      "The Classification Accuracy of C parameter 0.004281332398719391 is 0.8092604501607717:\n",
      "The Log Loss of C Parameter 0.004281332398719391 is 0.39422965168289265:\n",
      "\n",
      "The Classification Accuracy of C parameter 0.01438449888287663 is 0.8160771704180064:\n",
      "The Log Loss of C Parameter 0.01438449888287663 is 0.37919341983430505:\n",
      "\n",
      "The Classification Accuracy of C parameter 0.04832930238571752 is 0.8227652733118971:\n",
      "The Log Loss of C Parameter 0.04832930238571752 is 0.3663871371498045:\n",
      "\n",
      "The Classification Accuracy of C parameter 0.1623776739188721 is 0.8234083601286174:\n",
      "The Log Loss of C Parameter 0.1623776739188721 is 0.3636228053044914:\n",
      "\n",
      "The Classification Accuracy of C parameter 0.5455594781168515 is 0.8248231511254019:\n",
      "The Log Loss of C Parameter 0.5455594781168515 is 0.3630455636144642:\n",
      "\n",
      "The Classification Accuracy of C parameter 1.8329807108324339 is 0.8244372990353698:\n",
      "The Log Loss of C Parameter 1.8329807108324339 is 0.3617336803704798:\n",
      "\n",
      "The Classification Accuracy of C parameter 6.1584821106602545 is 0.824951768488746:\n",
      "The Log Loss of C Parameter 6.1584821106602545 is 0.3611597427279924:\n",
      "\n",
      "The Classification Accuracy of C parameter 20.6913808111479 is 0.8244372990353698:\n",
      "The Log Loss of C Parameter 20.6913808111479 is 0.3628061698744931:\n",
      "\n",
      "The Classification Accuracy of C parameter 69.51927961775606 is 0.8237942122186496:\n",
      "The Log Loss of C Parameter 69.51927961775606 is 0.36267968965733144:\n",
      "\n",
      "The Classification Accuracy of C parameter 233.57214690901213 is 0.8257234726688103:\n",
      "The Log Loss of C Parameter 233.57214690901213 is 0.36193387322299014:\n",
      "\n",
      "The Classification Accuracy of C parameter 784.7599703514607 is 0.8246945337620579:\n",
      "The Log Loss of C Parameter 784.7599703514607 is 0.36139578341133455:\n",
      "\n",
      "The Classification Accuracy of C parameter 2636.6508987303555 is 0.8235369774919614:\n",
      "The Log Loss of C Parameter 2636.6508987303555 is 0.3611355140995623:\n",
      "\n",
      "The Classification Accuracy of C parameter 8858.667904100832 is 0.8219935691318327:\n",
      "The Log Loss of C Parameter 8858.667904100832 is 0.36171871348838586:\n",
      "\n",
      "The Classification Accuracy of C parameter 29763.51441631313 is 0.8237942122186496:\n",
      "The Log Loss of C Parameter 29763.51441631313 is 0.3612079392374154:\n",
      "\n",
      "The Classification Accuracy of C parameter 100000.0 is 0.8244372990353698:\n",
      "The Log Loss of C Parameter 100000.0 is 0.3617682031638986:\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Looping over the parameters\n",
    "C_List = np.geomspace(1e-5,1e5,num=20)\n",
    "CA = []\n",
    "Logarithmic_Loss = []\n",
    "\n",
    "for c in C_List:\n",
    "    log_reg2 = LogisticRegression(random_state = 10, max_iter=10000, C=c)\n",
    "    log_reg2.fit(X_train, y_train)\n",
    "    score = log_reg2.score(X_test, y_test)\n",
    "    CA.append(score)\n",
    "    print(\"The Classification Accuracy of C parameter {} is {}:\".format(c, score) )\n",
    "    pred_proba_t = log_reg2.predict_proba(X_test)\n",
    "    log_loss2 = log_loss(y_test,pred_proba_t)\n",
    "    Logarithmic_Loss.append(log_loss2)\n",
    "    print(\"The Log Loss of C Parameter {} is {}:\".format(c, log_loss2))\n",
    "    print()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>C_List</th>\n",
       "      <th>CA2</th>\n",
       "      <th>Logarithmic_Loss2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16</td>\n",
       "      <td>2636.650899</td>\n",
       "      <td>0.823537</td>\n",
       "      <td>0.361136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11</td>\n",
       "      <td>6.158482</td>\n",
       "      <td>0.824952</td>\n",
       "      <td>0.361160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18</td>\n",
       "      <td>29763.514416</td>\n",
       "      <td>0.823794</td>\n",
       "      <td>0.361208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15</td>\n",
       "      <td>784.759970</td>\n",
       "      <td>0.824695</td>\n",
       "      <td>0.361396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>17</td>\n",
       "      <td>8858.667904</td>\n",
       "      <td>0.821994</td>\n",
       "      <td>0.361719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>10</td>\n",
       "      <td>1.832981</td>\n",
       "      <td>0.824437</td>\n",
       "      <td>0.361734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>19</td>\n",
       "      <td>100000.000000</td>\n",
       "      <td>0.824437</td>\n",
       "      <td>0.361768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>14</td>\n",
       "      <td>233.572147</td>\n",
       "      <td>0.825723</td>\n",
       "      <td>0.361934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>13</td>\n",
       "      <td>69.519280</td>\n",
       "      <td>0.823794</td>\n",
       "      <td>0.362680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>12</td>\n",
       "      <td>20.691381</td>\n",
       "      <td>0.824437</td>\n",
       "      <td>0.362806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>9</td>\n",
       "      <td>0.545559</td>\n",
       "      <td>0.824823</td>\n",
       "      <td>0.363046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>8</td>\n",
       "      <td>0.162378</td>\n",
       "      <td>0.823408</td>\n",
       "      <td>0.363623</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>7</td>\n",
       "      <td>0.048329</td>\n",
       "      <td>0.822765</td>\n",
       "      <td>0.366387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>6</td>\n",
       "      <td>0.014384</td>\n",
       "      <td>0.816077</td>\n",
       "      <td>0.379193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>5</td>\n",
       "      <td>0.004281</td>\n",
       "      <td>0.809260</td>\n",
       "      <td>0.394230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>4</td>\n",
       "      <td>0.001274</td>\n",
       "      <td>0.796399</td>\n",
       "      <td>0.425908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>3</td>\n",
       "      <td>0.000379</td>\n",
       "      <td>0.780450</td>\n",
       "      <td>0.469061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2</td>\n",
       "      <td>0.000113</td>\n",
       "      <td>0.758199</td>\n",
       "      <td>0.512945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000034</td>\n",
       "      <td>0.735563</td>\n",
       "      <td>0.540534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000010</td>\n",
       "      <td>0.722830</td>\n",
       "      <td>0.552070</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    index         C_List       CA2  Logarithmic_Loss2\n",
       "0      16    2636.650899  0.823537           0.361136\n",
       "1      11       6.158482  0.824952           0.361160\n",
       "2      18   29763.514416  0.823794           0.361208\n",
       "3      15     784.759970  0.824695           0.361396\n",
       "4      17    8858.667904  0.821994           0.361719\n",
       "5      10       1.832981  0.824437           0.361734\n",
       "6      19  100000.000000  0.824437           0.361768\n",
       "7      14     233.572147  0.825723           0.361934\n",
       "8      13      69.519280  0.823794           0.362680\n",
       "9      12      20.691381  0.824437           0.362806\n",
       "10      9       0.545559  0.824823           0.363046\n",
       "11      8       0.162378  0.823408           0.363623\n",
       "12      7       0.048329  0.822765           0.366387\n",
       "13      6       0.014384  0.816077           0.379193\n",
       "14      5       0.004281  0.809260           0.394230\n",
       "15      4       0.001274  0.796399           0.425908\n",
       "16      3       0.000379  0.780450           0.469061\n",
       "17      2       0.000113  0.758199           0.512945\n",
       "18      1       0.000034  0.735563           0.540534\n",
       "19      0       0.000010  0.722830           0.552070"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CA2 = np.array(CA).reshape(20,)\n",
    "Logarithmic_Loss2 = np.array(Logarithmic_Loss).reshape(20,)\n",
    "outcomes= zip(C_List, CA2, Logarithmic_Loss2)\n",
    "\n",
    "df_outcomes = pd.DataFrame(outcomes, columns= [\"C_List\", \"CA2\", \"Logarithmic_Loss2\"])\n",
    "df_outcomes\n",
    "df_outcomes.sort_values(\"Logarithmic_Loss2\", ascending=True).reset_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Let's compare our model to Dummy Classifier, so we can make sure that our model outperforms it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing Acc: 0.5682315112540193\n",
      "Log Loss: 14.912755287165936\n"
     ]
    }
   ],
   "source": [
    "# Training a Dummy Classifier\n",
    "from sklearn.dummy import DummyClassifier\n",
    "\n",
    "dummy_clf = DummyClassifier(strategy='most_frequent')\n",
    "dummy_clf.fit(X_train, y_train)\n",
    "score = dummy_clf.score(X_test,y_test)\n",
    "\n",
    "pred_proba_t = dummy_clf.predict_proba(X_test)\n",
    "log_loss2 = log_loss(y_test, pred_proba_t)\n",
    "print(\"Testing Acc:\",score)\n",
    "print(\"Log Loss:\",log_loss2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### We outperformed the Dummy Classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Model with Selected Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Testing Accuracy is: 0.8202572347266881\n",
      "The Log Loss is: 0.3492931843413458\n"
     ]
    }
   ],
   "source": [
    "log_reg3 = LogisticRegression(random_state=10, max_iter=10000, C=2636.650899)\n",
    "log_reg3.fit(X_train,y_train)\n",
    "score = log_reg3.score(X_valid,y_valid)\n",
    "\n",
    "pred_proba_t = log_reg3.predict_proba(X_valid)\n",
    "log_loss2 = log_loss(y_valid,pred_proba_t)\n",
    "\n",
    "print(\"The Testing Accuracy is:\", score)\n",
    "print(\"The Log Loss is:\",log_loss2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RECOMMENDATIONS\n",
    "## 1. Deployment of the created Logistic Regression model to predict cancelations, which can potentilly save the hotel $13M in lost revenue (78.2% of 16M of revenue loss for both properties)\n",
    "\n",
    "## 2. Make stricter deposit policies for market segments Groups, Offline TA/TO, and Online TA reservations in the City Hotel for PRT, GBR, ITA, and ESP in place of \"no deposit\" policies.\n",
    "\n",
    "## 3. For Groups and Offline TA/TO non-refundable reservations in the City Hotel in the 4 European countries:\n",
    "\n",
    "## -- Raise deposits\n",
    "\n",
    "## -- Introduce double-bookings of 78% of reservations for the room types A and D"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
